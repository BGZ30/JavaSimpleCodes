(1) About Java:
-----------------
    * Java is mainly used for application programming. It is widely used in window, web-based, enterprise and mobile applications.
    * Java vs C++: https://www.javatpoint.com/cpp-vs-java
    * Java uses compiler and interpreter both. 
        i.e. Java source code is converted into bytecode at compilation time. 
             The interpreter executes this bytecode at runtime and produces output. 
             Java is interpreted that is why it is platform independent.
    * Java supports call by value only. There is no call by reference in java.
    * Java doesn't support structures and unions.
    * Java supports documentation comment (/** ... */) to create documentation for java source code.
    * Java does not support header files like C++. Java uses the import keyword to include different classes and methods.

(2) A list of most important features of Java language is given below:
-----------------------------------------------------------------------
    Java Features
    Simple
    Object-Oriented
    Portable
    Platform independent
    Secured
    Robust
    Architecture neutral
    Interpreted
    High Performance
    Multithreaded
    Distributed
    Dynamic

(3) Features:
---------------
    - Simple:
        Java syntax is based on C++.
        Java has removed many complicated and rarely-used features, for example, explicit pointers, operator overloading, etc.
        There is no need to remove unreferenced objects because there is an Automatic Garbage Collection in Java.
    - Object Oriented:
        Java is an object-oriented programming language. Everything in Java is an object.
    -Platform-independent:
        Java code can be run on multiple platforms, for example, Windows, Linux, Sun Solaris, Mac/OS, etc. 
        Java code is compiled by the compiler and converted into bytecode. This bytecode is a platform-independent code because it can be run on multiple platforms, i.e., Write Once and Run Anywhere(WORA).
    - Secured:
        Java is best known for its security. With Java, we can develop virus-free systems. 
        Java is secured because:
            * No explicit pointer
            * Java Programs run inside a virtual machine sandbox
    - Robust:
        Robust simply means strong. Java is robust because:
            * It uses strong memory management.
            * There is a lack of pointers that avoids security problems.
            * There is automatic garbage collection in java which runs on the Java Virtual Machine to get rid of objects which are not being used by a Java application anymore.
            * There are exception handling and the type checking mechanism in Java.
    - Architecture-neutral:
        Java is architecture neutral because there are no implementation dependent features, for example, the size of primitive types is fixed.

        * e.g. In C programming, int data type occupies 2 bytes of memory for 32-bit architecture and 4 bytes of memory for 64-bit architecture. However, in Java, it occupies 4 bytes of memory for both 32 and 64-bit architectures.

(4) Compile and run:
---------------------------
    File name: Simple.java
    To compile:	javac Simple.java  --> will create a '.class' file (the bytecode); Simple.class
    To execute:	java Simple  

    ** At the compilation time:
        java code ---->|compiler|----> bytecode
    ** At the run time:
        class file --> classloader --> bytecode verified --> interpreter --> runtime --> hardware

        Classloader: is the subsystem of JVM that is used to load class files.
        Bytecode Verifier: checks the code fragments for illegal code that can violate access right to objects.
        Interpreter: read bytecode stream then execute the instructions.

Question: Can you save a java source file by other name than the class name?
    Yes, if the class is not public.
    Ex: 
        class Simple{
            public static void main(String[]args){
                System.out.println("Hello");
            }
        }

        can be saved as Hard.java

        Hard.java --|compiler| --> Simple.class

Question: Can you have multiple classes in a java source file?
    Yes,
             D.java       -----> (compiler) ---> A.class , B.class , C,class
            class A{}           |                  
            class B{}           |
            class C{}           |

(5) Coding Notes:
------------------
    * Having a semicolon at the end of class is optional in Java.

(6) Difference between JDK, JRE, and JVM:
-----------------------------------------
    https://www.javatpoint.com/difference-between-jdk-jre-and-jvm

(7) Variables:
    -----------
    There are three types of variables in java: local, instance and static.
        1- Local Variable
            A variable declared inside the body of the method.
            A local variable cannot be defined with "static" keyword.

        2- Instance Variable
            A variable declared inside the class but outside the body of the method. It is not declared as static.
            It is called instance variable because its value is instance specific and is not shared among instances.

        3- Static variable
            A variable which is declared as static is called static variable. It cannot be local. 
            You can create a single copy of static variable and share among all the instances of the class.
            Memory allocation for static variable happens only once when the class is loaded in the memory.

(8) Data types:
    -----------
    There are two types of data types in Java:
        - Primitive data types: The primitive data types include boolean, char, byte, short, int, long, float and double.
        - Non-primitive data types: The non-primitive data types include Classes, Interfaces, and Arrays.

Question: Why char uses 2 byte in java and what is \u0000 ?
    It is because java uses Unicode system not ASCII code system. The \u0000 is the lowest range of Unicode system.

IMPORTANT:
    https://www.javatpoint.com/operators-in-java